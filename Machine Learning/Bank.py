# -*- coding: utf-8 -*-
"""Untitled10.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Xep56wfu8o1pe4yyhT9gUQFZpKnuzsaQ
"""

!pip install pyspark

from pyspark.sql import SparkSession
spark = SparkSession.builder.appName('ML project').getOrCreate()

# load data 
df = spark.read.csv('bank.csv', header = True, inferSchema = True)
df.printSchema()

df.show()

# Show Dataset in DataFrame
import pandas as pd
pd.DataFrame(df.take(10), columns=df.columns).transpose()

# Data grouping by class 
class_name = df.columns[len(df.columns)-1]
df.groupby(class_name).count().toPandas()

# convert string to numeric 
from pyspark.ml.feature import StringIndexer
name_col = ['job', 'marital', 'education', 'default', 'housing', 'loan', 'contact', 'month', 'poutcome', 'deposit']
indexer = StringIndexer()

df1 = df
for name in name_col:
  indexer.setInputCol(name).setOutputCol(name + "_index")
  df2 = indexer.fit(df1).transform(df1)
  df1 = df2

df1.show()

name_col_feature = [name + "_index" for name in name_col]
name_col_feature.remove("deposit_index")
name_col_feature += ['balance', 'day', 'campaign', 'pdays', 'previous']
class_name = 'deposit_index'
print(name_col_feature)
print(class_name)

from pyspark.ml.feature import VectorAssembler

assembler = VectorAssembler()
assembler.setInputCols(name_col_feature).setOutputCol('features')

transformed_data = assembler.transform(df1)

transformed_data.show()

# Split the data
(training_data, test_data) = transformed_data.randomSplit([0.8,0.2])

training_data.show()

from pyspark.ml.classification import LogisticRegression
model = LogisticRegression(featuresCol = 'features',labelCol='deposit_index', maxIter=30)
M = model.fit(training_data)

# Predict with the test dataset
predictions = M.transform(test_data)

from pyspark.ml.evaluation import MulticlassClassificationEvaluator

multi_evaluator = MulticlassClassificationEvaluator(labelCol = 'deposit_index', metricName = 'accuracy')
print('Logistic Regression Accuracy:', multi_evaluator.evaluate(predictions))